Part 1: The initial Request from frontend

request url: /ai_dub
{
    "source_video_url": "https://effy-ai-dub-results.s3.amazonaws.com/WhatsApp+Video+2023-11-14+at+10.08.54+PM.mp4",
    "user_id": 51,
    "project_id": "ryan",
    "to_lang": "id"
}

# Handling on the backend - Create a progress api and start the dub process
# Thread Starts here and we will create an unique_id on dub api request to track the current request only
unique_id = str(uuid.uuid4())
user = get_jwt_identity()['frontend_userid']

# This following needs to be a thread so that we are able to receive the progress api request while we keep the dub process going
thread = Thread(target=aidub_progress.start,
					args=(request_json, user, unique_id,))
thread.start()
res = {"request_id": unique_id, "status": "progress_initiated"} # This will be the return element
# create progress object
progress_object = {
	"user_id": request_json['user_id'],
	"user_id": request_json['project_id'],
	"request_id": unique_id,
	"progress": Status_1
}
db['progress'].insert_one(progress_object)

return res



Part 2: Receiving the progress api request
request url: /ai_dub/progress
We receive this from the frontend: request: {"user_id": user_id, "request_id": request_id}

# function to receive progress from the db for handling error or return mapped json
def receive(self, json):
	if 'request_id' not in json:
		raise AppException(msg="request id is missing", msg_code="request_id_missing", status="400")
	if 'user_id' not in json:
		raise AppException(msg="user id is missing", msg_code="user_id_missing", status="400")
	res = db[self.collection].find_one({"request_id": json["request_id"], "user_id": json["user_id"]})
	
	# if status is not complete then send the actual status
	if res['progress'] != "Status_5":
		if "exception" in res:
			return \
				{
					"status": 500,
					"msg": res['exception'],
					"msg_code": "Progress API Error"
				}
		else:
			return {"progress": res['current_progress']}
	else:
		# Delete the progress element as it is no longer needed and the main s3 url is pushed to the main table
		db[self.collection].delete_one({"request_id": json["request_id"]})
		return res['final_response']
		
		
		
Part 3: How to update the progress element?
Suppose the transcribing is completed and we move to the 2nd stage the mongodb update will be something like below

db['progress'].update_one({"request_id": unique_id},
                                          {"$set": {"progress": "Status_2"}})

####################################################################################################################

Summarised:
1. Start Dubbing Process

Receive initial request (/ai_dub)
Start thread for dubbing
Create progress_object in database
Return res with request_id and status


2. Check Progress Request

Receive progress request (/ai_dub/progress)
Validate request_id and user_id
Retrieve progress from database


3. Database Interaction for Progress Updates

If dubbing in progress (progress != Status_5):
	If an exception occurs, return error response
	Else, return current progress
	If dubbing complete (progress == Status_5):
	Delete progress object from database
	Return final response


4. Updating Progress in Database

As dubbing process advances, update progress in database (Status_1 to Status_5)